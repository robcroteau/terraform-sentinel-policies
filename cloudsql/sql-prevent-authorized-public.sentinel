# TFPlan based policy preventing a CloudSQL authorized network of 
# CIDR range 0.0.0.0./0

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}


validate_no_authz_public_cidr = func(type) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }
    
    if r.diff["settings.0.ip_configuration.#"].computed else false is true {
      # IP_config block is computed by Terraform when not specified or enabled
      # without an ip_config block there are no authorized networks, skip it
      print ("SQL Instance: ", address, " does not authorized networks.")
      continue
    } 

    if r.diff["settings.0.ip_configuration.0.authorized_networks.#"].computed else false is true {
      # Authorized Networks being computed means there are no values to iterate on
      # skip this resource
      continue
    } else {
      # Authorized Blocks exist
      for r.applied["settings"][0].ip_configuration[0].authorized_networks as an {
        if an.value is "0.0.0.0/0" {
          validated = false
          print ("SQL Instances has public authorized network: ", address)
        }
      }
    }
  }
  return validated
}

##### Rules #####

# Call the validation function
access_validated = validate_no_authz_public_cidr("google_sql_database_instance")

# Main rule
main = rule {
  access_validated
}
