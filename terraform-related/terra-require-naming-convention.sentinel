# TFPlan based policy that allows resource types to require specific
# naming conventions. This requires a Map defining the relationship 
# between a resource and what attribute is considered its "name"
# and a regex expression
# Map, naming_conventions, example [{"google_project":{"name_attribute":"project_id","name_exp":"^(p|np)-(si|gaf)-(\\w+)"}}]

##### Imports #####

import "tfplan"
import "strings"

##### Lists #####
// Accepts an array of maps [{"resource_type":{"name_attribute","name_exp"}] ex  {"google_project":{"name_attribute":"project_id","name_exp":"^(p|np)-(si|gaf)-(\\w+)"}}
param naming_conventions 

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}


validate_naming_conventions = func(allowed_conventions) {

  validated = true
  for allowed_conventions as configuration {
    # Get all resource instances of the specified type
    for configuration as type, matchexp {
      resource_instances = find_resources_from_plan(type)
      for resource_instances as address, r {

        # Skip resource instances that are being destroyed
        # to avoid unnecessary policy violations.
        # Used to be: if length(r.diff) == 0
        if r.destroy and not r.requires_new {
          print("Skipping resource", address, "that is being destroyed.")
          continue
        }
        if r.applied[matchexp.name_attribute] matches matchexp.name_exp {
          print("Matches")
        } else {
          print ("Resource type ", type, " Doesn't match naming convention at: ", address)
          validated = false
        }
      }
    }
    
  }
  
  return validated
}


##### Rules #####

# Call the validation function
allowed_resources_only = validate_naming_conventions(naming_conventions)

# Main rule
main = rule {
  allowed_resources_only
}
