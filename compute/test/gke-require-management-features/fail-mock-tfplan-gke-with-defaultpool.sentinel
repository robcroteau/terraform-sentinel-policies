import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_container_cluster": {
				"fail_cluster": {
					0: {
						"applied": {
							"additional_zones":            "74D93920-ED26-11E3-AC10-0800200C9A66",
							"addons_config":               "74D93920-ED26-11E3-AC10-0800200C9A66",
							"cluster_autoscaling":         "74D93920-ED26-11E3-AC10-0800200C9A66",
							"cluster_ipv4_cidr":           "74D93920-ED26-11E3-AC10-0800200C9A66",
							"default_max_pods_per_node":   "74D93920-ED26-11E3-AC10-0800200C9A66",
							"enable_binary_authorization": "74D93920-ED26-11E3-AC10-0800200C9A66",
							"enable_kubernetes_alpha":     false,
							"enable_legacy_abac":          false,
							"enable_tpu":                  "74D93920-ED26-11E3-AC10-0800200C9A66",
							"endpoint":                    "74D93920-ED26-11E3-AC10-0800200C9A66",
							"id":                          "74D93920-ED26-11E3-AC10-0800200C9A66",
							"initial_node_count":          "1",
							"instance_group_urls":         "74D93920-ED26-11E3-AC10-0800200C9A66",
							"ip_allocation_policy":        "74D93920-ED26-11E3-AC10-0800200C9A66",
							"location":                    "us-central1",
							"logging_service":             "74D93920-ED26-11E3-AC10-0800200C9A66",
							"master_auth":                 "74D93920-ED26-11E3-AC10-0800200C9A66",
							"master_version":              "74D93920-ED26-11E3-AC10-0800200C9A66",
							"monitoring_service":          "74D93920-ED26-11E3-AC10-0800200C9A66",
							"name":                        "my-gke-cluster",
							"network":                     "default",
							"network_policy":              "74D93920-ED26-11E3-AC10-0800200C9A66",
							"node_config":                 "74D93920-ED26-11E3-AC10-0800200C9A66",
							"node_locations":              "74D93920-ED26-11E3-AC10-0800200C9A66",
							"node_pool":                   "74D93920-ED26-11E3-AC10-0800200C9A66",
							"node_version":                "74D93920-ED26-11E3-AC10-0800200C9A66",
							"project":                     "74D93920-ED26-11E3-AC10-0800200C9A66",
							"region":                      "74D93920-ED26-11E3-AC10-0800200C9A66",
							"services_ipv4_cidr":          "74D93920-ED26-11E3-AC10-0800200C9A66",
							"zone":                        "74D93920-ED26-11E3-AC10-0800200C9A66",
						},
						"destroy": false,
						"diff": {
							"additional_zones.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"addons_config.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"cluster_autoscaling.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"cluster_ipv4_cidr": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"default_max_pods_per_node": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"enable_binary_authorization": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"enable_kubernetes_alpha": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"enable_legacy_abac": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"enable_tpu": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"endpoint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"initial_node_count": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"instance_group_urls.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ip_allocation_policy.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"location": {
								"computed": false,
								"new":      "us-central1",
								"old":      "",
							},
							"logging_service": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"master_auth.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"master_version": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"monitoring_service": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "my-gke-cluster",
								"old":      "",
							},
							"network": {
								"computed": false,
								"new":      "default",
								"old":      "",
							},
							"network_policy.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"node_config.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"node_locations.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"node_pool.#": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"node_version": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"region": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"services_ipv4_cidr": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"zone": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "0.11.14"

variables = {}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
