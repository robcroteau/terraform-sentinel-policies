// Prevent Primitive roles across all resources that have iam member bindings 
// used in the Datalake project. BigQuery is the only resource that allows
// access definitions to include Owner/Viewer/Editor. Case is handled
// in BQ's policies. 

##### Imports #####

import "tfplan"
import "strings"

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that all instances of a specified resource type being modified have
# a specified top-level attribute is not a given list
validate_attribute_not_in_list = func(type, attribute, disallowed_values) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff[attribute].computed else false is true {
      print("Resource", address, "has attribute", attribute,
            "that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # validated = false
    } else {
      # Validate that each instance has allowed value
      if (strings.to_lower(r.applied[attribute]) else "") in disallowed_values {
        print("Resource", address, "has attribute", attribute, "with value",
              r.applied[attribute] else "",
              "that is a restricted primitive role.")
        validated = false
      }
    }

  }

  return validated
}

validate_roles = func(members_list) {

  validated = true

  for members_list as t {
    result = validate_attribute_not_in_list(t,"role",["roles/owner","roles/viewer","roles/editor","owner","viewer","editor"])
    if result is false {
      validated = false
    }
  }
  return validated
}

iam_member_bindings = [
"google_billing_account_iam_binding",
"google_billing_account_iam_member",
"google_storage_bucket_iam_member",
"google_storage_bucket_iam_binding",
"google_pubsub_subscription_iam_member",
"google_pubsub_topic_iam_member",
"google_kms_key_ring_iam_member",
"google_kms_key_ring_iam_binding",
"google_kms_crypto_key_iam_member",
"google_kms_crypto_key_iam_binding",
"google_compute_subnetwork_iam_member",
"google_compute_subnetwork_iam_binding",
"google_pubsub_topic_iam_binding",
"google_pubsub_subscription_iam_binding",
"google_project_iam_member",
"google_project_iam_binding",
"google_folder_iam_member",
"google_folder_iam_binding",
"google_organization_iam_binding",
"google_organization_iam_member",
"google_service_account_iam_binding",
"google_service_account_iam_member"]

##### Rules #####

# Call the validation function
roles_validated = validate_roles(iam_member_bindings)

# Main rule
main = rule {
  roles_validated
}