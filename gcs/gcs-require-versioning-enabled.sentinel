# This policy uses the Sentinel tfplan import to require that
# all GCS Buckets enabled versioning

##### Imports #####

import "tfplan"
import "strings"
import "types"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}


validate_versioning_enabled = func(type) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # check for "versioning"
    if keys(r.applied) contains "versioning" {
      if r.applied["versioning"][0].enabled else false is true {
        print ("Versioning is enabled")
      } else{
        # Versioning not enabled
        validated = false
        print ("Resource: ", address, " is not version enabled") 
      }
    } else{
      print ("Resource: ", address, " is not version enabled")
      validated = false
    }

  }
  return validated
}

##### Rules #####

# Call the validation function
versioning_validated = validate_versioning_enabled("google_storage_bucket")

# Main rule
main = rule {
  versioning_validated
}
