# Policy enforces that GKE Node Pools are created with all management features Enabled
# Specifically auto_repair and auto_upgrade
# To enforce this the default_node_pool is restricted in google_container_cluster resources


##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}


validate_management_enabled = func(type) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }
    
    if r.diff["management.#"].computed else false is true {
      # Management block is computed, therefore all values are unset
      validated = false
      print ("GKE NodePool: ", address, " does not have auto_repair and auto_upgrade enabled.")
      continue
    } 

    if r.applied["management"][0].auto_repair == false else false is true {
      print("Auto Repair Disabled for:", address, ". It must be enabled")
      validated = false
      continue
    }

    if r.applied["management"][0].auto_upgrade == false else false is true {
      print("Auto Upgrade is Disabled for:", address, ". It must be enabled")
      validated = false
      continue
    }
  }
  return validated
}

validate_attribute_has_value = func(type, attribute, value) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff[attribute].computed else false is true {
      print("Resource", address, "has attribute", attribute,
            "that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      validated = false
    } else {
      # Validate that each instance has desired value
      if (r.applied[attribute] else "") is not value {
        print("Resource", address, "has attribute", attribute, "with value",
              r.applied[attribute] else "",
              "that is not the required value:", value)
        print("Policy requires nodepools to have auto_repair and auto_upgrade enabled. You must remove GKE",
        "default node pools to comply")
        validated = false
      }
    }

  }

  return validated
}

##### Rules #####

# Call the validation function
management_validated = validate_management_enabled("google_container_node_pool")
validate_gke_removed_defaultpool = validate_attribute_has_value("google_container_cluster", "remove_default_node_pool", true)

# Main rule
main = rule {
  management_validated and validate_gke_removed_defaultpool
}