# TFPlan based policy allowing administrators to prevent the creation
# of specific resource types eg Prevent "google_pubsub_topic" resources
# Takes a list, restricted_resource_list, of resource names 

##### Imports #####

import "tfplan"
import "strings"

##### Lists #####
param restricted_resource_list 

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}


validate_no_restricted_resources = func(restricted_types) {

  validated = true

  for restricted_types as rtype {
    # Returns all instances matching a restricted type
    # If the result is non-null than a restricted resource creation
    # has been attempted
    resource_instances = find_resources_from_plan(rtype)

    # Loop through the resource instances
    for resource_instances as address, r {

      # Skip resource instances that are being destroyed
      # to avoid unnecessary policy violations.
      if r.destroy and not r.requires_new {
        print("Skipping resource", address, "that is being destroyed.")
        continue
      }
      
      # In this loop means a restricted resource was created
      validated = false
      print ("Restricted resource (",rtype,"), at: ", address)
    }
  }
  
  return validated
}


##### Rules #####

# Call the validation function
allowed_resources_only = validate_no_restricted_resources(restricted_resource_list)

# Main rule
main = rule {
  allowed_resources_only
}
