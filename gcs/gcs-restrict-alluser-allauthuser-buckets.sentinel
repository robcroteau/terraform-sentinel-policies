# This policy uses the Sentinel tfplan import to require that
# all Google Cloud Storage Buckets, or Object Default Policies 
# restrict the various allUsers entities. This policy will allow individual public
# objects 

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validates allUsers and allAuthenticatedUsers not present in 
# access_control style resources
validate_alluser_entity_roles_access_control = func(type) {
  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {
    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff["entity"].computed {
      print("Resource", address, "has attribute: entity that is computed.")
      # Computed Entities are now allowed
      # validated = false
    } else {
      # Validate that each instance does not have restricted values
      
      if r.applied["entity"] contains "allUsers" or r.applied["entity"] contains "allAuthenticatedUsers" {
        validated = false
        print("Resource: ", address, " contains reference to allUsers. Validated is: ", validated)
      }
    }

  }
  return validated
}

# Validates allUsers and allAuthenticatedUsers not present in 
# acl style resources
validate_alluser_entity_roles_acl = func(type) {
  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {
    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    for r.applied["role_entity"] as entity {
      print("Entity: ", entity)
      if entity contains "allUsers" or entity contains "allAuthenticatedUsers" {
        validated = false
        print ("ACL Entity Role contains allUsers or allAuthenticatedUsers at: ", address)
      }
    }

  }
  return validated
}

validate_alluser_iam_member_binding = func(type) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # iam_binding has an array 'members' check and then check just member
    if keys(r.applied) contains "members" {
      results = filter r.applied["members"] as member { strings.to_lower(member) contains "allusers" or
                         strings.to_lower(member) contains "allauthenticatedusers"}
      if length(results) > 0 {
        print("Resource contains disallowed allUser/allAuthenticatedUsers for sharing: ", address)
        validated = false
      }
    } 
    if keys(r.applied) contains "member" {
      member = r.applied["member"]
      if strings.to_lower(member) contains "allusers" or strings.to_lower(member) contains "allauthenticatedusers" {
        print("Resource contains disallowed allUser/allAuthenticatedUsers for sharing: ", address)
        validated = false
      }
    }
  }
  return validated
}

##### Rules #####
object_level_access_control_validated = validate_alluser_entity_roles_access_control("google_storage_default_object_access_control")
object_level_acl_validated = validate_alluser_entity_roles_acl("google_storage_default_object_acl")
bucket_level_access_control_validated = validate_alluser_entity_roles_access_control("google_storage_bucket_access_control")
bucket_level_acl_validated = validate_alluser_entity_roles_acl("google_storage_bucket_acl")

bucket_iam_binding_validated = validate_alluser_iam_member_binding("google_storage_bucket_iam_binding")
bucket_iam_member_validated = validate_alluser_iam_member_binding("google_storage_bucket_iam_member")

bucket_level = rule {
  bucket_level_access_control_validated and bucket_level_acl_validated
}

object_level = rule {
  object_level_access_control_validated and object_level_acl_validated
}

bucket_iam_member_or_binding = rule {
  bucket_iam_binding_validated and bucket_iam_member_validated
}

# Main rule
main = rule {
  bucket_level and object_level and bucket_iam_member_or_binding
}


