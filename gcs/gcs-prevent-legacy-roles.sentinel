# This policy uses the Sentinel tfplan import to require that
# all Google Cloud Storage Buckets, or Object Default Policies 
# prevent legacy roles

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}



# Validate that Role_entity doesnt contain the string 'legacy'
validate_acl_role_entity_not_in_list = func(type, attribute) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }
    
    # Determine if the attribute is computed
    if r.diff[attribute].computed else false is true {
      print("Resource", address, "has attribute", attribute,
            "that is computed.")
      # Bucket or Object access should not be computed
      validated = false
    } else {
      if r.diff["role_entity.#"].computed else false is true {
        # Role_entity is not populated skip resource
        continue
      } 
      # Validate that each instance does not have restricted values
      results = filter r.applied[attribute] as role { strings.to_lower(role) contains "legacy" }
      if length(results) > 0 {
        print("Invalid roles found: ", results)
        validated = false
      }
    }

  }
  return validated
}

validate_role_not_legacy = func(type) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # check for "versioning"
    if keys(r.applied) contains "role" {
      if strings.to_lower(r.applied["role"]) contains "legacy" {
        print ("Legacy role found on resource: ", address)
        validated = false
      }
    } 
  }
  return validated
}

##### Rules #####

# Call the validation function
# Three checks, 
# BUCKET/Object ACL for predefined/defaults
# Bucket/Object ACL for role_entities
# Bucket/Object for access control violations



object_level_acl_validated = validate_acl_role_entity_not_in_list("google_storage_default_object_acl",
                     "role_entity")
bucket_level_acl_validated = validate_acl_role_entity_not_in_list("google_storage_bucket_acl",
                     "role_entity")

bucket_iam_binding_validated = validate_role_not_legacy("google_storage_bucket_iam_binding")
bucket_iam_member_validated = validate_role_not_legacy("google_storage_bucket_iam_member")

# Main rule
main = rule {
  bucket_level_acl_validated and object_level_acl_validated and bucket_iam_member_validated and bucket_iam_binding_validated
}


