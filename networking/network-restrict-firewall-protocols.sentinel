# This policy uses the Sentinel tfplan import to restrict specific Firewall Protocols
# from being defined inside a firewall resource, for example restricting ICMP

##### Imports #####

import "tfplan"
import "strings"

param disallowed_protocols 

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that all instances of a specified resource type being modified have
# a specified top-level attribute in a given list
validate_attribute_not_in_protocol_list = func(type, disallowed_values) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    result = any r.applied["allow"] as t { t.protocol in disallowed_values }
    if result is true {
      validated = false
      print ("Disallowed protocol found in: ", address, " matching value in ", disallowed_values)
    }

  }
  return validated
}

##### Rules #####

# Call the validation function
protocol_validated = validate_attribute_not_in_protocol_list("google_compute_firewall",
                     disallowed_protocols)
# Main rule
main = rule {
  protocol_validated
}